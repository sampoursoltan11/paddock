name: Manual Deploy to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_infrastructure:
        description: 'Deploy infrastructure (Bicep)'
        required: true
        type: boolean
        default: false
      deploy_backend:
        description: 'Deploy backend (Azure Functions)'
        required: true
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend (React SPA)'
        required: true
        type: boolean
        default: true

env:
  AZURE_RESOURCE_GROUP: smartproof-rg-${{ inputs.environment }}
  BACKEND_FUNCTION_APP_NAME: smartproof-func-${{ inputs.environment }}
  FRONTEND_APP_SERVICE_NAME: smartproof-web-${{ inputs.environment }}
  NODE_VERSION: '18.x'

jobs:
  deploy-infrastructure:
    if: ${{ inputs.deploy_infrastructure }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location eastus \
            --tags Environment=${{ inputs.environment }} Project="SmartProof AI"

      - name: Deploy Bicep Template
        run: |
          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file infrastructure/main.bicep \
            --parameters infrastructure/parameters/${{ inputs.environment }}.parameters.json \
            --verbose

  deploy-backend:
    if: ${{ inputs.deploy_backend }}
    needs: [deploy-infrastructure]
    # Skip if infrastructure deployment was not run or failed
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Functions
        run: |
          cd backend
          npm install -g azure-functions-core-tools@4
          func azure functionapp publish ${{ env.BACKEND_FUNCTION_APP_NAME }} --typescript

  deploy-frontend:
    if: ${{ inputs.deploy_frontend }}
    needs: [deploy-infrastructure]
    # Skip if infrastructure deployment was not run or failed
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          VITE_ENVIRONMENT: ${{ inputs.environment }}
          VITE_API_BASE_URL: https://${{ env.BACKEND_FUNCTION_APP_NAME }}.azurewebsites.net/api

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service
        run: |
          cd frontend/dist
          zip -r ../frontend.zip .
          cd ..
          az webapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.FRONTEND_APP_SERVICE_NAME }} \
            --src frontend.zip

  post-deployment-validation:
    needs: [deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        run: |
          echo "Deployment Summary:"
          echo "Environment: ${{ inputs.environment }}"
          echo "Infrastructure: ${{ inputs.deploy_infrastructure }}"
          echo "Backend: ${{ inputs.deploy_backend }}"
          echo "Frontend: ${{ inputs.deploy_frontend }}"
          echo ""
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
